generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id          String        @id @default(uuid())
  email       String        @unique
  password    String
  name        String
  contact     String?
  image       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  appointment Appointment[]
  booking     Booking[]
  record      Record[]

  @@index([email])
}

model Category {
  id      String         @id @default(uuid())
  name    CategoryDomain @unique
  icon    String
  doctor  Doctor[]
  service Service[]
}

enum CategoryDomain {
  CAGING_SERVICE  @map("Caging Service")
  EVENT_SERVICE   @map("Event Service")
  SITTING_SERVICE @map("Sitting Service")
  PET_GROOMING    @map("Pet Grooming")
  VET_DOCTOR      @map("Vet Doctor")
}

model Doctor {
  id            String        @id @default(uuid())
  email         String        @unique
  password      String
  name          String?
  image         String?
  address       String?
  experience_yr Int?
  start_time    String?
  end_time      String?
  about         String?
  fees          Float?
  status        Status        @default(UNVERIFIED)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  category_id   String
  category      Category      @relation(fields: [category_id], references: [id])
  appointment   Appointment[]

  @@index([email])
}

model Service {
  id          String    @id @default(uuid())
  email       String    @unique
  password    String
  name        String?
  image       String?
  address     String?
  start_time  String?
  end_time    String?
  about       String?
  price       Float?
  status      Status    @default(UNVERIFIED)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category_id String
  category    Category  @relation(fields: [category_id], references: [id])
  booking     Booking[]

  @@index([email])
}

enum Status {
  VERIFIED
  UNVERIFIED
}

model Appointment {
  id          String   @id @default(uuid())
  date        DateTime
  time        String
  note        String?
  customer_id String
  customer    Customer @relation(fields: [customer_id], references: [id])
  doctor_id   String
  doctor      Doctor   @relation(fields: [doctor_id], references: [id])

  @@index([doctor_id])
  @@index([date])
}

model Booking {
  id          String   @id @default(uuid())
  date        DateTime
  time        String
  note        String?
  customer_id String
  customer    Customer @relation(fields: [customer_id], references: [id])
  service_id  String
  service     Service  @relation(fields: [service_id], references: [id])

  @@index([service_id])
  @@index([date])
}

model Record {
  id                String   @id @default(uuid())
  pet_name          String
  medical_history   String
  document_link     String?
  pet_documents     String[]
  last_vaccination  DateTime
  next_vaccination  DateTime
  weight            Float
  age               String
  emergency_contact String
  dogBreed_id       Int
  dogBreed          DogBreed @relation(fields: [dogBreed_id], references: [id])
  symptom_id        Int
  symptom           Symptom  @relation(fields: [symptom_id], references: [id])
  customer_id       String
  customer          Customer @relation(fields: [customer_id], references: [id])

  @@index([customer_id])
}

model DogBreed {
  id         Int      @id @default(autoincrement())
  breed_name String   @unique
  record     Record[]
}

model Symptom {
  id           Int      @id @default(autoincrement())
  symptom_name String   @unique
  record       Record[]
}
